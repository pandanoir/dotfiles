source "$ZDOTDIR/utils.zsh"

# emacsのtrampがタイムアウトするのに対応
[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ '

bindkey -e

autoload -U colors
colors

git-prompt() {
  local branchname
  branchname=$(git symbolic-ref --short HEAD 2>/dev/null)
  if [ -z $branchname ]; then
    return
  fi
  echo "%{${fg[magenta]}%}${branchname}%{${reset_color}%}"
}
prompt-set() {
  local user_host='%F{074}[%n@%m]'
  local last_status='%F{red}$([[ $? -ne 0 && $? -ne 130 ]] && echo "[%?]")' # 異常終了のとき(Ctrl-cを除く)にステータスを表示する
  PROMPT="$user_host$last_status%f# "
  RPROMPT='`git-prompt`%F{048}[%~]%f'
}
prompt-reset() {
  PROMPT="# "
  RPROMPT=''
}
prompt-set
setopt prompt_subst #表示毎にPROMPTで設定されている文字列を評価する

setopt no_beep  # ビープ音を消す
setopt globdots # 明確なドットの指定なしで.から始まるファイルをマッチ

setopt auto_cd
function chpwd() {
  if is_mac; then
    ls -G
  else
    ls --color=auto
  fi
}

# コマンド履歴関連
setopt hist_ignore_dups
setopt hist_ignore_space
setopt share_history
SAVEHIST=100
HISTFILE=$HOME/.zsh_history

# 補完
autoload -U compinit
if compinit -C; then
  zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
  zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
  zstyle ':completion:*:default' menu select=1
  zstyle ':completion:*' menu select
  zstyle ':completion:*' use-cache true
  zstyle ':completion:*' cache-path $XDG_CACHE_HOME/zsh/cache
  setopt auto_list
  setopt IGNOREEOF
  setopt auto_menu
  _ssh() {
    compadd $(grep '^Host ' ~/.ssh/config | awk '$0=$2' | sort)
  }
  compdef _ssh ssh
fi
# setopt menu_complete

if command_exists fasd; then
  eval "$(fasd --init auto)"
fi

source "$ZDOTDIR/zinit.zsh"

# ローカルファイルの読み込み
file_exists "$XDG_CACHE_HOME/fzf/shell/completion.zsh" && source "$XDG_CACHE_HOME/fzf/shell/completion.zsh"
file_exists "$XDG_CACHE_HOME/fzf/shell/key-bindings.zsh" && source "$XDG_CACHE_HOME/fzf/shell/key-bindings.zsh"
source "$ZDOTDIR/alias.zsh"
source "$ZDOTDIR/keybind.zsh"
file_exists "$ZDOTDIR/.zshrc.local" && source "$ZDOTDIR/.zshrc.local"
if command_exists tmux && [ $(whoami) != 'root' ] && is_empty_string "$DISABLE_LAUNCHING_TMUX" && is_empty_string "$TMUX" && is_empty_string "$STY" && is_empty_string $IS_VSCODE && is_empty_string $GITHUB_ACTIONS; then
  source "$ZDOTDIR/launch_tmux.zsh"
fi

if command_exists starship; then
  eval "$(starship init zsh)"
fi
if command_exists zellij && [[ -z "$ZELLIJ" ]]; then
    if [[ "$ZELLIJ_AUTO_ATTACH" == "true" ]]; then
        zellij attach -c
    else
        zellij
    fi

    if [[ "$ZELLIJ_AUTO_EXIT" == "true" ]]; then
        exit
    fi
fi
